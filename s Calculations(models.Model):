[1mdiff --git a/README.md b/README.md[m
[1mindex eb93181..c4162b6 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -2,18 +2,53 @@[m
 [m
 ## TODOs[m
 [m
[31m-* Tests[m
[31m-[m
[31m-* Load gapi only once? Store stuff in sessionData?[m
[31m-[m
[31m-* Fetch data instead of reloading page in PlanCreate[m
[32m+[m[32m* Provide initial value for measurement unit[m
[32m+[m
[32m+[m[32mMeeting flow[m
[32m+[m[32m  * Start with MeetingStart and MeetingFinish[m
[32m+[m[32m  * Iteratively add other views[m
[32m+[m[41m  [m
[32m+[m[32m  * Define models[m
[32m+[m[32m  * Define urls[m
[32m+[m[32m  * Define empty/generic views[m
[32m+[m[32m  * Test flow[m
[32m+[m[32m  * Improve views[m
[32m+[m[32m  * ...[m
[32m+[m[32m  * IF meeting_state = ongoing,[m[41m [m
[32m+[m[32m  * Meeting flow "navbar"[m
[32m+[m
[32m+[m[32mMeeting flow design[m
[32m+[m[32m0. Click start button in meeting list item[m
[32m+[m[32m  * LATER[m
[32m+[m[32m    * Only show start button if meeting in previous/next two hour[m
[32m+[m[32m    * Start button disapears after meeting finishes[m
[32m+[m[32m1. Start[m
[32m+[m[32m  * IF previous meeting: notes from previous meeting[m
[32m+[m[32m2. Measurements[m
[32m+[m[32m3. IF first meeting: calculations page[m
[32m+[m[32m4. Meal plan adjustments[m
[32m+[m[32m  * Slide down option to check calculations[m
[32m+[m[32m    * Option to edit calculations[m
[32m+[m[32m5. Finish[m
[32m+[m[32m  * Notes for next meeting[m
[32m+[m[32m  * Generate meal plan deliverable[m
[32m+[m
[32m+[m[32m* ? Move FormMixin code to BootstrapMixin[m
 [m
 [m
 ### Measurements[m
 [m
[31m-* Create templated views[m
[31m-[m
[31m-* ? Add measurements in meeting[m
[32m+[m[32m* Measures list[m
[32m+[m[32m  * Select measure[m
[32m+[m[32m* New measurement form[m
[32m+[m[32m* Measurement list[m
[32m+[m[32m* LATER[m
[32m+[m[32m  * Progress graph EITHER:[m
[32m+[m[32m    * For selected measure[m
[32m+[m[32m    * For pre defined measures (eg. weight, body fat)[m
[32m+[m[32m  * Allow client to add measurements[m
[32m+[m[32m  * Distinguish client and nutritionist added measurements[m
[32m+[m[32m  * Progress graph[m
 [m
 [m
 ### Clients[m
[36m@@ -28,6 +63,9 @@[m
 ### Meetings[m
 [m
 * Put calendar in meetings list page[m
[32m+[m[32m* Failed meeting indicator (eg. red color) on list view[m
[32m+[m[32m* Only show detail view button for started meetings[m
[32m+[m[32m  * Replace start button in place[m
 [m
 * Calendar[m
   * Add event / fill date time by clicking calendar cell[m
[36m@@ -49,9 +87,15 @@[m
 * ? calendar.js: Use eventSources instead of events[m
   * Use addEventSource, remove, etc.[m
 [m
[32m+[m[32mLATER[m
[32m+[m[32m* If any meeting is ongoing, place button/popup in every page to return to meeting[m
[32m+[m[32m  * Return to where left off[m
[32m+[m
 [m
 ### Plans[m
 [m
[32m+[m[32m* Fetch data instead of reloading page in PlanCreate[m
[32m+[m
 Meals page[m
   * ...[m
   * Intermediate 'dosage distribution per meal' table[m
[36m@@ -98,15 +142,19 @@[m [mPlan page[m
 Measurements page[m
   * Move height to measurements[m
 [m
[31m-Appointment "timeline" / nav element[m
[32m+[m
[32m+[m[32m### Google API[m
[32m+[m
[32m+[m[32m* Load gapi only once? Store stuff in sessionData?[m
[32m+[m[32m* Split calendar.js script into multiple files[m
[32m+[m[32m  * Node.js required?[m
 [m
 [m
 ### Misc[m
[32m+[m[32m* Change any 'get_object_or_404' calls with 'self.object'[m
[32m+[m[32m* More tests[m
 * Handle brute force attacks[m
 * Handle DDoS attacks[m
[31m-* Organize calendar.js script[m
[31m-  * Split into multiple files?[m
[31m-    * How do imports work? Any additional software needed?[m
 * Fix opposite logic on Paper Dashboard sidebar toggler[m
 * Filter db entries appropriately[m
 * Turn function views into classes[m
[1mdiff --git a/service/forms.py b/service/forms.py[m
[1mindex 91ec880..c6eba3d 100644[m
[1m--- a/service/forms.py[m
[1m+++ b/service/forms.py[m
[36m@@ -2,7 +2,7 @@[m [mfrom django.contrib.auth.forms import AuthenticationForm[m
 from django import forms[m
 from django.forms.models import inlineformset_factory[m
 [m
[31m-from service.models import Client, Meeting, Meal, Plan[m
[32m+[m[32mfrom .models import Client, Meeting, Meal, Plan[m
 [m
 [m
 MealsBaseFormSet = inlineformset_factory(Client, Meal, fields='__all__', extra=6, can_delete=False, max_num=6)[m
[36m@@ -59,3 +59,24 @@[m [mclass LoginForm(AuthenticationForm):[m
     password = forms.CharField(widget=forms.PasswordInput(attrs={[m
         'class': 'form-control mb-3',[m
         'placeholder': 'palavra-passe'}))[m
[32m+[m
[32m+[m
[32m+[m[32mdef append_to_dict_item(dict_, item, appendix):[m
[32m+[m[32m    dict_[item] = (dict_[item] if item in dict_ else '') + appendix[m
[32m+[m
[32m+[m[32mclass BootstrapMixin:[m
[32m+[m[32m    def __init__(self, *args, **kwargs):[m
[32m+[m[32m        super().__init__(*args, **kwargs)[m
[32m+[m[32m        for field_name in self.fields:[m
[32m+[m[32m            field = self.fields[field_name][m
[32m+[m[32m            attrs = field.widget.attrs[m
[32m+[m[32m            if isinstance(field, forms.ChoiceField):[m
[32m+[m[32m                append_to_dict_item(attrs, 'class', 'custom-select ')[m
[32m+[m[32m            else:[m
[32m+[m[32m                append_to_dict_item(attrs, 'class', 'form-control ')[m
[32m+[m
[32m+[m[32mclass MeetingStartForm(BootstrapMixin, forms.Form):[m
[32m+[m[32m    last_meeting_notes = forms.CharField(widget=forms.Textarea, disabled=True)[m
[32m+[m
[32m+[m[32mclass MeetingFinishForm(BootstrapMixin, forms.Form):[m
[32m+[m[32m    notes = forms.CharField(widget=forms.Textarea)[m
[1mdiff --git a/service/models.py b/service/models.py[m
[1mindex b608f75..75fbfed 100644[m
[1m--- a/service/models.py[m
[1m+++ b/service/models.py[m
[36m@@ -19,15 +19,9 @@[m [mPAL = ([m
     (Decimal('1.75'), 'Ativo'),[m
     (Decimal('2.20'), 'Muito ativo'),[m
 )[m
[31m-MEASURE = ([m
[31m-    ('w', 'Peso'),[m
[31m-    ('h', 'Altura'),[m
[31m-    ('f', 'Gordura'),[m
[31m-)[m
 [m
 [m
 class Partner(models.Model):[m
[31m-    """The Partner model."""[m
     name = models.CharField(max_length=200, verbose_name='Nome')[m
     date = models.DateField(null=True, blank=True, verbose_name='Data de in√≠cio da parceria')[m
     # active = models.BooleanField(...)[m
[36m@@ -37,16 +31,19 @@[m [mclass Partner(models.Model):[m
         ordering = ['-date', 'name'][m
 [m
     def get_absolute_url(self):[m
[31m-        """Returns the url to access Partner details."""[m
         return reverse('partner-detail', args=[str(self.id)])[m
 [m
     def __str__(self):[m
[31m-        """String to represent Partner model."""[m
         return f'{self.name}'[m
 [m
 [m
 class Client(models.Model):[m
[31m-    """The Client model."""[m
[32m+[m[32m    STATE = ([m
[32m+[m[32m        ('p', 'Pendente'),[m
[32m+[m[32m        ('a', 'Ativo'),[m
[32m+[m[32m        ('f', 'Finalizado'),[m
[32m+[m[32m    )[m
[32m+[m
     user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Utilizador')[m
     nutritionist = models.ForeignKey(User, on_delete=models.SET_NULL, related_name='nutritionist', null=True, verbose_name='Nutricionista')[m
 [m
[36m@@ -54,23 +51,22 @@[m [mclass Client(models.Model):[m
     gender = models.CharField(max_length=1, choices=GENDER, default='f', verbose_name='Sexo')[m
     # born = models.DateField(verbose_name='Data de nascimento')[m
     age = models.IntegerField(validators=[MinValueValidator(0), MaxValueValidator(200)], verbose_name='Idade (anos)')[m
[32m+[m[32m    pal = models.DecimalField(max_digits=3, decimal_places=2, choices=PAL, default=PAL[1][0], verbose_name='Atividade f√≠sica atual')[m
     [m
     height = models.IntegerField(validators=[MinValueValidator(50), MaxValueValidator(300)], verbose_name='Altura (cm)')[m
     weight = models.DecimalField(max_digits=4, decimal_places=1, verbose_name='Peso (kg)')[m
     body_fat = models.DecimalField(max_digits=3, decimal_places=1, null=True, blank=True, verbose_name='Gordura corporal (%)')[m
[31m-    pal = models.DecimalField(max_digits=3, decimal_places=2, choices=PAL, default=PAL[1][0], verbose_name='Atividade f√≠sica atual')[m
     [m
[32m+[m[32m    state = models.CharField(max_length=1, choices=STATE, default='a', verbose_name='Estado')[m
     partner = models.ForeignKey(Partner, on_delete=models.SET_NULL, null=True, verbose_name='Parceiro')[m
 [m
     class Meta:[m
         ordering = ['name', 'age'][m
 [m
     def get_absolute_url(self):[m
[31m-        """Returns the url to access Client details."""[m
         return reverse('client-detail', args=[str(self.id)])[m
 [m
     def __str__(self):[m
[31m-        """String to represent Client model."""[m
         return f'{self.name}'[m
 [m
     def get_bmi(self):[m
[36m@@ -78,7 +74,6 @@[m [mclass Client(models.Model):[m
 [m
 [m
 class Meal(models.Model):[m
[31m-    """The Meal model."""[m
     client = models.ForeignKey(Client, on_delete=models.CASCADE)[m
     time = models.TimeField(null=True, blank=True, verbose_name='Hora')[m
     place = models.CharField(max_length=200, blank=True, verbose_name='Local')[m
[36m@@ -87,28 +82,48 @@[m [mclass Meal(models.Model):[m
         ordering = ['id'][m
 [m
     def __str__(self):[m
[31m-        """String to represent Meal model."""[m
         return f'meal_id: {self.id} ({self.client})'[m
 [m
 [m
[32m+[m[32mclass Measure(models.Model):[m
[32m+[m[32m    name = models.CharField(max_length=100, verbose_name='Nome')[m
[32m+[m[32m    unit = models.CharField(max_length=50, blank=True, verbose_name='Unidade')[m
[32m+[m
[32m+[m[32m    class Meta:[m
[32m+[m[32m        ordering = ['name'][m
[32m+[m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        return f'{self.name} ({self.unit})'[m
[32m+[m
[32m+[m
 class Measurement(models.Model):[m
[31m-    """The Measurement model."""[m
     client = models.ForeignKey(Client, on_delete=models.CASCADE, verbose_name='Cliente')[m
[31m-    measure = models.CharField(max_length=1, choices=MEASURE, default='w', verbose_name='Medida')[m
[32m+[m[32m    measure = models.ForeignKey(Measure, on_delete=models.CASCADE, verbose_name='Medida')[m
     value = models.IntegerField(verbose_name='Valor')[m
[31m-    # unit = models.CharField(max_length=50, blank=True, verbose_name='Unidade')[m
[32m+[m[32m    unit = models.CharField(max_length=50, blank=True, verbose_name='Unidade')[m
     date = models.DateField(default=datetime.date.today, verbose_name='Data')[m
 [m
     class Meta:[m
         ordering = ['-date', 'client__name'][m
 [m
     def __str__(self):[m
[31m-        """String to represent Measurement model."""[m
         return f'{self.get_measure_display()} of {self.client.name} in {self.date}'[m
 [m
 [m
 class Meeting(models.Model):[m
[31m-    """The Meeting model."""[m
[32m+[m[32m    STATE = ([m
[32m+[m[32m        ('s', 'Agendada'),[m
[32m+[m[32m        ('o', 'A decorrer'),[m
[32m+[m[32m        ('t', 'Terminada'),[m
[32m+[m[32m    )[m
[32m+[m[32m    PHASE = ([m
[32m+[m[32m        ('s', 'In√≠cio'),[m
[32m+[m[32m        ('m', 'Medi√ß√µes'),[m
[32m+[m[32m        ('c', 'C√°lculos'),[m
[32m+[m[32m        ('p', 'Plano'),[m
[32m+[m[32m        ('f', 'Final'),[m
[32m+[m[32m    )[m
[32m+[m
     client = models.ForeignKey(Client, on_delete=models.CASCADE, verbose_name='Cliente')[m
     date = models.DateField(verbose_name='Data')[m
     time = models.TimeField(verbose_name='Hora')[m
[36m@@ -116,22 +131,26 @@[m [mclass Meeting(models.Model):[m
     summary = models.CharField(max_length=200, verbose_name='Resumo')[m
     event = models.CharField(max_length=200, verbose_name='ID do evento Google')[m
     weight = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True, verbose_name='Peso (kg)')[m
[32m+[m[41m    [m
[32m+[m[32m    state = models.CharField(max_length=1, choices=STATE, default='s', verbose_name='Estado')[m
[32m+[m[32m    phase = models.CharField(max_length=1, choices=PHASE, default=None, verbose_name='Fase')[m
[32m+[m[41m    [m
     notes = models.TextField(blank=True, verbose_name='Notas')[m
 [m
     class Meta:[m
         ordering = ['-date', '-time'][m
 [m
     def get_absolute_url(self):[m
[31m-        """Returns the url to access Meeting details."""[m
         return reverse('meeting-detail', args=[str(self.id)])[m
 [m
     def __str__(self):[m
[31m-        """String to represent Meeting model."""[m
         return f'{self.date}'[m
 [m
[32m+[m[32m    def get_previous(self):[m
[32m+[m[32m        return self.client.meeting_set.filter(date__lt=self.date).first()[m
[32m+[m
 [m
 class Plan(models.Model):[m
[31m-    """The Plan model."""[m
     client = models.ForeignKey(Client, on_delete=models.CASCADE, verbose_name='Cliente')[m
     meeting = models.ForeignKey(Meeting, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Consulta')[m
     date = models.DateField(default=now, null=True, blank=True, verbose_name='Data')[m
[36m@@ -169,9 +188,59 @@[m [mclass Plan(models.Model):[m
         ordering = ['-date', 'client__name', '-id'][m
 [m
     def get_absolute_url(self):[m
[31m-        """Returns the url to access Plan details."""[m
         return reverse('plan-detail', args=[str(self.id)])[m
     [m
     def __str__(self):[m
[31m-        """String to represent Plan model."""[m
         return f'{self.client.name} ({self.date})'[m
[32m+[m
[32m+[m
[32m+[m[32mclass Calculations(models.Model):[m
[32m+[m[32m    client = models.ForeignKey(Client, on_delete=models.CASCADE, verbose_name='Cliente')[m
[32m+[m[32m    meeting = models.ForeignKey(Meeting, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Consulta')[m
[32m+[m[32m    date = models.DateField(default=now, null=True, blank=True, verbose_name='Data')[m
[32m+[m
[32m+[m[32m    goal_weight = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True, verbose_name='Peso desejado (kg)')[m
[32m+[m[32m    goal_body_fat = models.DecimalField(max_digits=3, decimal_places=1, null=True, blank=True, verbose_name='Gordura corporal (%)')[m
[32m+[m[32m    new_pal = models.DecimalField(max_digits=3, decimal_places=2, choices=PAL, default=PAL[2][0], null=True, blank=True, verbose_name='Atividade f√≠sica atual')[m
[32m+[m[41m    [m
[32m+[m[32m    goal_time = models.DecimalField([m
[32m+[m[32m        max_digits=3, decimal_places=1, validators=[MinValueValidator(0.5), MaxValueValidator(12)],[m
[32m+[m[32m        default=3, null=True, blank=True, verbose_name='Dura√ß√£o da dieta (meses)')[m
[32m+[m[32m    pal_change = models.DecimalField([m
[32m+[m[32m        max_digits=4, decimal_places=1, validators=[MinValueValidator(0), MaxValueValidator(300)],[m
[32m+[m[32m        default=0, null=True, blank=True, verbose_name='Mudan√ßa no PAL (%)')[m
[32m+[m
[32m+[m[32m    daily_energy = models.IntegerField(validators=[MinValueValidator(500), MaxValueValidator(5000)], null=True, blank=True, verbose_name='Energia di√°ria (kcal/dia)')[m
[32m+[m
[32m+[m[32m    proteins = models.IntegerField(default=25, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de prote√≠nas (%)')[m
[32m+[m[32m    carbs = models.IntegerField(default=50, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de hidratos de carbono (%)')[m
[32m+[m[32m    fats = models.IntegerField(default=25, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de l√≠pidos (%)')[m
[32m+[m[41m    [m
[32m+[m[32m    regular_milk = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de leite meio-gordo (doses)')[m
[32m+[m[32m    low_fat_milk = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de leite magro (doses)')[m
[32m+[m[32m    solid_yoghurt = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de iogurte s√≥lido (doses)')[m
[32m+[m[32m    liquid_yoghurt = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de iogurte l√≠quido (doses)')[m
[32m+[m[32m    whey = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de whey (doses)')[m
[32m+[m[32m    fruit = models.IntegerField(default=3, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de fruta (doses)')[m
[32m+[m[32m    vegetables = models.IntegerField(default=4, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Quantidade de vegetais (doses)')[m
[32m+[m[41m    [m
[32m+[m[32m    # proteins_dosage = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Carne e equivalentes (doses)')[m
[32m+[m[32m    # carbs_dosage = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='P√£o e equivalentes (doses)')[m
[32m+[m[32m    # fats_dosage = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)], null=True, blank=True, verbose_name='Gordura (doses)')[m
[32m+[m
[32m+[m[32m    class Meta:[m
[32m+[m[32m        ordering = ['-date', 'client__name', '-id'][m
[32m+[m
[32m+[m[32m    def get_absolute_url(self):[m
[32m+[m[32m        return reverse('plan-detail', args=[str(self.id)])[m
[32m+[m[41m    [m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        return f'{self.client.name} ({self.date})'[m
[32m+[m
[32m+[m
[32m+[m[32mclass MealPlan(models.Model):[m
[32m+[m[32m    client = models.ForeignKey(Client, on_delete=models.CASCADE, verbose_name='Cliente')[m
[32m+[m[32m    meeting = models.ForeignKey(Meeting, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Consulta')[m
[32m+[m[32m    date = models.DateField(default=now, null=True, blank=True, verbose_name='Data')[m
[32m+[m
[32m+[m[32m    todo = models.BooleanField(default=True, verbose_name='Bigan')[m
[1mdiff --git a/service/urls.py b/service/urls.py[m
[1mindex ad430eb..9dc3d7a 100644[m
[1m--- a/service/urls.py[m
[1m+++ b/service/urls.py[m
[36m@@ -29,6 +29,12 @@[m [murlpatterns = [[m
     path('meeting/create/<int:client_pk>/<int:duration>/', views.MeetingCreate.as_view(), name='meeting-create'),[m
     path('meeting/<int:pk>/update/', views.MeetingUpdate.as_view(), name='meeting-update'),[m
     path('meeting/<int:pk>/delete/', views.MeetingDelete.as_view(), name='meeting-delete'),[m
[32m+[m
[32m+[m[32m    path('meeting/<int:pk>/start/', views.MeetingStart.as_view(), name='meeting-start'),[m
[32m+[m[32m    # path('meeting/<int:pk>/measure/', views.MeetingMeasure.as_view(), name='meeting-measure'),[m
[32m+[m[32m    # path('meeting/<int:pk>/calculate/', views.MeetingCalculate.as_view(), name='meeting-calculate'),[m
[32m+[m[32m    # path('meeting/<int:pk>/plan/', views.MeetingPlan.as_view(), name='meeting-plan'),[m
[32m+[m[32m    path('meeting/<int:pk>/finish/', views.MeetingFinish.as_view(), name='meeting-finish'),[m
     [m
     path('calendar/<int:client_pk>/', views.get_calendar, name='get-calendar'),[m
 [m
[1mdiff --git a/service/views.py b/service/views.py[m
[1mindex 64994ce..58e41d2 100644[m
[1m--- a/service/views.py[m
[1m+++ b/service/views.py[m
[36m@@ -13,8 +13,8 @@[m [mfrom django.urls import reverse, reverse_lazy[m
 from django.views import generic, View[m
 from django.views.generic.edit import ModelFormMixin[m
 [m
[31m-from service.models import Partner, Client, Measurement, Meeting, Plan, PAL[m
[31m-from service.forms import ClientForm[m
[32m+[m[32mfrom .models import Partner, Client, Measurement, Meeting, Plan, PAL[m
[32m+[m[32mfrom .forms import ClientForm, MeetingStartForm, MeetingFinishForm[m
 [m
 [m
 def get_field_value(field, obj):[m
[36m@@ -65,7 +65,7 @@[m [mclass ViewMixin:[m
     def get_next(self):[m
         return (self.request.GET.get('next')[m
             or hasattr(self, 'success_url') and self.success_url[m
[31m-            or 'index')[m
[32m+[m[32m            or reverse('index'))[m
 [m
 class ListMixin(ViewMixin):[m
     context_object_name = 'list'[m
[36m@@ -361,6 +361,38 @@[m [mclass MeetingDelete(PermissionRequiredMixin, MeetingFormMixin, generic.DeleteVie[m
         return context[m
 [m
 [m
[32m+[m[32mclass MeetingStart(PermissionRequiredMixin, generic.FormView):[m
[32m+[m[32m    permission_required = 'service.change_meeting'[m
[32m+[m[32m    template_name = 'service/generic_form.html'[m
[32m+[m[32m    form_class = MeetingStartForm[m
[32m+[m[32m    success_url = reverse_lazy('meeting-finish')[m
[32m+[m[32m    # success_url = reverse_lazy('meeting-measure', self.kwargs['pk'])[m
[32m+[m[41m    [m
[32m+[m[32m    def dispatch(self, request, *args, **kwargs):[m
[32m+[m[32m        meeting_pk = self.kwargs['pk'][m
[32m+[m[32m        last_meeting = get_object_or_404(Meeting, pk=meeting_pk).get_previous()[m
[32m+[m[32m        if last_meeting is None:[m
[32m+[m[32m            return redirect('meeting-finish')[m
[32m+[m[32m            # return redirect('MeetingMeasure', request, pk=pk)[m
[32m+[m[32m        self.initial = { 'last_meeting_notes': last_meeting.notes }[m
[32m+[m[32m        return super().dispatch(request, *args, **kwargs)[m
[32m+[m
[32m+[m[32mdef measure(request, pk):[m
[32m+[m[32m    pass[m
[32m+[m
[32m+[m[32mclass MeetingFinish(PermissionRequiredMixin, generic.FormView):[m
[32m+[m[32m    permission_required = 'service.change_meeting'[m
[32m+[m[32m    template_name = 'service/generic_form.html'[m
[32m+[m[32m    form_class = MeetingFinishForm[m
[32m+[m[32m    success_url = reverse_lazy('index')  #TODO redirect to 'next' url; pass 'next' along meeting flow[m
[32m+[m
[32m+[m[32m    def form_valid(self, form):[m
[32m+[m[32m        meeting = get_object_or_404(Meeting, pk=self.kwargs['pk'])[m
[32m+[m[32m        meeting.notes = form.notes[m
[32m+[m[32m        meeting.save()[m
[32m+[m[32m        return super().form_valid(form)[m
[32m+[m
[32m+[m
 class MeasurementList(PermissionRequiredMixin, ListMixin, generic.ListView):[m
     permission_required = 'service.view_measurement'[m
     model = Measurement[m
